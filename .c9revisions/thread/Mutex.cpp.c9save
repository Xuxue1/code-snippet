{"ts":1351345903669,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#include <assert.h>\n#include \"Mutex.h\"\n#include \"Utils.h\"\nCMutex::CMutex()\n{\n    HANDLE hMutex = NULL;\n\n    assert(sizeof(hMutex) == sizeof(mState));\n\n    hMutex = CreateMutex(NULL, FALSE, NULL);\n    mState = (void *)hMutex;\n}\n\nCMutex::CMutex(const char* name)\n{\n\n    HANDLE hMutex;\n\n    assert(sizeof(hMutex) == sizeof(mState));\n\n    hMutex = CreateMutex(NULL, FALSE, name);\n    mState = (void *)hMutex;\n}\n\nCMutex::CMutex(int type, const char* name)\n{\n    // XXX: type  not used for now\n    HANDLE hMutex;\n\n    assert(sizeof(hMutex) == sizeof(mState));\n\n    hMutex = CreateMutex(NULL, FALSE, name);\n    mState = (void *)hMutex;\n}\n\nCMutex::~CMutex()\n{\n    CloseHandle((HANDLE)mState);\n}\n\nint CMutex::lock()\n{\n    DWORD dwWaitResult;\n    dwWaitResult = WaitForSingleObject((HANDLE) mState, INFINITE);\n    return dwWaitResult != WAIT_OBJECT_0 ? -1 : NO_ERROR;\n}\n\nvoid CMutex::unlock()\n{\n    if (!ReleaseMutex((HANDLE) mState))\n    {\n        DbgPrintf(\"Can not unlock!\");\n    }\n}\n\nint CMutex::tryLock()\n{\n    DWORD dwWaitResult;\n    dwWaitResult = WaitForSingleObject((HANDLE)mState, 0);\n    if (dwWaitResult != WAIT_OBJECT_0 && dwWaitResult != WAIT_TIMEOUT)\n    {\n        DbgPrintf(\"Can not lock!\");\n    }\n    return (dwWaitResult == WAIT_OBJECT_0) ? 0 : -1;\n}"]],"start1":0,"start2":0,"length1":0,"length2":1258}]],"length":1258}
