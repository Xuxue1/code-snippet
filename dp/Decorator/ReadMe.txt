作用:
动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator 模式相比
生成子类更为灵活。

为什么使用Decorator?
我们通常可以使用继承来实现功能的拓展,如果这些需要拓展的功能的种类很繁
多,那么势必生成很多子类,增加系统的复杂性,同时,使用继承实现功能拓展,我
们必须可预见这些拓展功能,这些功能是编译时就确定了,是静态的.

使用Decorator的理由是:这些功能需要由用户动态决定加入的方式和时机.
Decorator提供了"即插即用"的方法,在运行期间决定何时增加何种功能.

Adapter和Decorator模式的区别：
1).前者关注的是如何将两个本来互不相关的类糅合到一起，后者关注的是如何
在原来功能的基础上做一些小的调整

Builder和Decorator模式的区别：
1).前者关注的是对象的构建，后者关注的是对象功能的添加、个性化
2).前者主要用于GUI界面构建对象的场合、后者主要用于动态添加功能、改变
流程的场合 