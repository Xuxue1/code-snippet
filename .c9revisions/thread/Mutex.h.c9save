{"ts":1351345896736,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#ifndef _RL_MUTEX_\n#define _RL_MUTEX_\n#include <Windows.h>\nclass CMutex \n{\npublic:\n    CMutex();\n    CMutex(const char* name);\n    CMutex(int type, const char* name = NULL);\n    ~CMutex();\n\n    // lock or unlock the mutex\n    int    lock();\n    void   unlock();\n\n    // lock if possible; returns 0 on success, error otherwise\n    int    tryLock();\n\n    // Manages the mutex automatically. It'll be locked when Autolock is\n    // constructed and released when Autolock goes out of scope.\n    class Autolock {\n    public:\n        inline Autolock(CMutex& mutex) : mLock(mutex)  { mLock.lock(); }\n        inline Autolock(CMutex* mutex) : mLock(*mutex) { mLock.lock(); }\n        inline ~Autolock() { mLock.unlock(); }\n    private:\n        CMutex& mLock;\n    };\nprivate:\n    // A mutex cannot be copied\n    CMutex(const CMutex&);\n    CMutex& operator = (const CMutex&);\n    void*   mState;\n};\n\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":894}]],"length":894}
