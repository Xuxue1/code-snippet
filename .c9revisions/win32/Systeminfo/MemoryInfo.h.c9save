{"ts":1362525006585,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//------------------------------------------------------------------------------\n// MemoryInfo.h\n//    \n//   This file contains MemoryInfo, which is basically just determines \n//   the system memory information and then stortes the results. \n//   This class COULD provide member functions that would return the\n//   number of bytes instead of strings. These would probably be overloaded\n//   functions that take pointer arguments.\n// \n//   Copyright (c) 2001 Paul Wendt [p-wendt@wideopenwest.com]\n// \n#ifndef MEMORYINFO_H_\n#define MEMORYINFO_H_\n\n#include \"SysInfoClasses.h\"\n#include <windows.h>\n#include <string>\n\nclass DLL_CLASS MemoryInfo\n{\npublic:        // object creation/destruction\n   MemoryInfo();\n   MemoryInfo(const MemoryInfo& source);\n   MemoryInfo& operator=(const MemoryInfo& right);\n   virtual ~MemoryInfo();\n\npublic:        \n   // operations\n   virtual void determineMemoryInfo();\n\n   // attribute modification\n   std::string getTotalRam() const;\n   void getTotalRam(DWORD* pTotalRam) const;\n   std::string getAvailRam() const;\n   void getAvailRam(DWORD* pAvailRam) const;\n   std::string getTotalPageFile() const;\n   void getTotalPageFile(DWORD* pTotalPageFile) const;\n   std::string getAvailPageFile() const;\n   void getAvailPageFile(DWORD* pAvailPageFile) const;\n   std::string getTotalVirtual() const;\n   void getTotalVirtual(DWORD* pTotalVirtual) const;\n   std::string getAvailVirtual() const;\n   void getAvailVirtual(DWORD* pAvailVirtual) const;\n\nprotected:     // protected members\n   void setMemoryStatus(const MEMORYSTATUS& memoryStatus);\n\n   virtual void assign(const MemoryInfo& source);\n\nprivate:       // attributes\n   MEMORYSTATUS m_stMemStatus;\n   static const int MEMORY_OFFSET;\n};\n\ninline void MemoryInfo::getTotalRam(DWORD* pTotalRam) const { *pTotalRam = m_stMemStatus.dwTotalPhys; }\ninline void MemoryInfo::getAvailRam(DWORD* pAvailRam) const { *pAvailRam = m_stMemStatus.dwAvailPhys; }\ninline void MemoryInfo::getTotalPageFile(DWORD* pTotalPageFile) const { *pTotalPageFile = m_stMemStatus.dwTotalPageFile; }\ninline void MemoryInfo::getAvailPageFile(DWORD* pAvailPageFile) const { *pAvailPageFile = m_stMemStatus.dwAvailPageFile; }\ninline void MemoryInfo::getTotalVirtual(DWORD* pTotalVirtual) const { *pTotalVirtual = m_stMemStatus.dwTotalVirtual; }\ninline void MemoryInfo::getAvailVirtual(DWORD* pAvailVirtual) const { *pAvailVirtual = m_stMemStatus.dwAvailVirtual; }\n\n// for derived classes\ninline void MemoryInfo::setMemoryStatus(const MEMORYSTATUS& memoryStatus) { m_stMemStatus = memoryStatus; }\n\n#endif"]],"start1":0,"start2":0,"length1":0,"length2":2545}]],"length":2545}
